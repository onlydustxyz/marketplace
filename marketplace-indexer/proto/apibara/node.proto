// # Apibara Node service.
syntax = "proto3";

package apibara.node.v1alpha1;

import "google/protobuf/any.proto";

service Node {
  // Get information about the node and its status.
  rpc Status(StatusRequest) returns (StatusResponse);

  // Connect to the node and start streaming data from it.
  rpc StreamMessages(ConnectRequest) returns (stream ConnectResponse);
}

// Status request. It's empty.
message StatusRequest {
}

// Status response. Returns information about the node's stream.
message StatusResponse {
  oneof message {
    SyncingStatus syncing = 1;
    SyncedStatus synced = 2;
    NotStartedStatus not_started = 3;
  }
}

// Node is syncing with their sources.
message SyncingStatus {
  // The latest sequence number.
  uint64 sequence = 1;
  // The syncing status of each input.
  repeated InputSyncingStatus inputs = 2;
}

// Syncing status of the node's input.
message InputSyncingStatus {
  // Latest sequence number.
  uint64 head = 1;
  // Latest indexed sequenced number.
  uint64 indexed = 2;
}

// Node is fully synced.
message SyncedStatus {
  // The latest sequence number.
  uint64 sequence = 1;
}

// Node didn't start syncing.
message NotStartedStatus {
}

// Message sent from the client to the node.
message ConnectRequest {
  // Start streaming from the provided sequence number.
  uint64 starting_sequence = 1;
}

// Message sent from the node to the client.
message ConnectResponse {
  oneof message {
    Invalidate invalidate = 1;
    Data data = 2;
  }
}

// Invalidate data after (inclusive) the given sequence number.
message Invalidate {
  uint64 sequence = 1;
}

message Data {
  uint64 sequence = 1;
  google.protobuf.Any data = 2;
}

// Information about the node's sync status.
message SyncStatus {
  // The latest sequence number of the stream.
  uint64 latest_sequence = 1;
  // Sync state.
  SyncState state = 2;
}

// Sync state.
enum SyncState {
  // Not specified. This value should not be sent down the wire.
  SYNC_STATE_UNSPECIFIED = 0;
  // The node can be considered synced, producing live data.
  SYNC_STATE_SYNCED = 1;
  // The node is catching up with their source. Data is stale.
  SYNC_STATE_CATCHING_UP = 2;
}
