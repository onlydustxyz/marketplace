fragment ProjectId on Projects {
  id
}

fragment LastProjectMergedPullRequests on Projects {
  githubRepos {
    projectId
    githubRepoId
    repoIssues(where: { type: { _eq: "PullRequest" }, status: { _eq: "Merged" } }) {
      ...GithubIssue
    }
  }
}

fragment ProjectPaidWorkItems on Projects {
  ...ProjectId
  budgets {
    id
    paymentRequests {
      ...PaymentRequestId
      recipientId
      workItems {
        ...WorkItemId
      }
    }
  }
}

fragment ProjectVisibilityDetails on Projects {
  ...ProjectId
  projectDetails {
    projectId
    visibility
  }
  githubReposAggregate {
    aggregate {
      count
    }
  }
  contributors {
    githubUserId
  }
  projectLeads(orderBy: { user: { githubUserId: ASC } }) {
    userId
  }
  budgetsAggregate {
    aggregate {
      count
    }
  }
  pendingInvitations {
    id
    githubUserId
  }
}
