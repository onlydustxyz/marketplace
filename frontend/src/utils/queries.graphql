fragment ContributorId on User {
  id
}

fragment IgnoredGithubIssueId on IgnoredGithubIssues {
  projectId
  repoId
  issueNumber
}

fragment GithubIssueDetails on GithubIssues {
  id
  repoId
  issueNumber
  title
  htmlUrl
  authorId
  type
  status
  createdAt
  closedAt
  mergedAt
  ignoredForProjects {
    ...IgnoredGithubIssueId
  }
}

fragment VisibleProject on Projects {
  id
  projectLeads {
    userId
    projectId
  }
  githubRepos {
    projectId
    githubRepoId
  }
  budgets {
    id
  }
  pendingInvitations {
    id
    githubUserId
  }
}

fragment ProjectContributors on Projects {
  id
  githubRepos {
    projectId
    githubRepoId
    githubRepoDetails {
      id
      content {
        id
        contributors {
          ...ContributorId
        }
      }
    }
  }
  budgets {
    id
    paymentRequests {
      id
      githubRecipient {
        ...ContributorId
      }
    }
  }
}

fragment ProjectContributorsByLeader on Projects {
  githubRepos {
    projectId
    githubRepoId
    repoIssues(where: { createdAt: { _gte: $createdSince }, type: { _eq: "PullRequest" }, status: { _eq: "Merged" } }) {
      ...GithubIssueDetails
    }
  }
}
