- name: Backend
  definition:
    url_from_env: BACKEND_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: BACKEND_GRAPHQL_API_KEY
    forward_client_headers: true
  permissions:
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          type Query {
            releaseDate: String!
          }
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
            mutation: Mutation
          }
          scalar EthereumAddress
          scalar EthereumName
          scalar Iban
          scalar Url
          scalar Uuid
          type Mutation {
            acceptProjectLeaderInvitation(invitationId: Uuid!): Boolean!
            acceptTermsAndConditions: Uuid!
            applyToProject(projectId: Uuid!): Uuid!
            ignoreIssue(projectId: Uuid!, repoId: Int!, issueNumber: Int!): Boolean!
            markInvoiceAsReceived(paymentReferences: [PaymentReference!]!): Int!
            markProfileWizardAsDisplayed: Uuid!
            unignoreIssue(projectId: Uuid!, repoId: Int!, issueNumber: Int!): Boolean!
            updatePayoutInfo(location: Location, identity: IdentityInput, payoutSettings: PayoutSettingsInput): Uuid!
          }
          type Query {
            releaseDate: String!
          }
          enum IdentityType {
            COMPANY
            PERSON
          }
          enum PayoutSettingsType {
            BANK_ADDRESS
            ETHEREUM_ADDRESS
            ETHEREUM_NAME
          }
          input BankAddress {
            BIC: String!
            IBAN: Iban!
          }
          input CompanyIdentity {
            identificationNumber: String
            name: String
            owner: PersonIdentity
          }
          input IdentityInput {
            optCompany: CompanyIdentity
            optPerson: PersonIdentity
            type: IdentityType!
          }
          input Location {
            address: String
            city: String
            country: String
            postCode: String
          }
          input PaymentReference {
            paymentId: Uuid!
            projectId: Uuid!
          }
          input PayoutSettingsInput {
            optBankAddress: BankAddress
            optEthAddress: EthereumAddress
            optEthName: EthereumName
            type: PayoutSettingsType!
          }
          input PersonIdentity {
            firstname: String
            lastname: String
          }
