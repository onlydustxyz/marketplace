- name: Backend
  definition:
    url_from_env: BACKEND_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: BACKEND_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
            mutation: Mutation
          }
          scalar Email
          scalar EthereumAddress
          scalar EthereumName
          scalar Uuid
          type Mutation {
            acceptProjectLeaderInvitation(invitationId: Uuid!): Boolean!
            requestPayment(projectId: Uuid!, recipientId: Int!, amountInUsd: Int!, reason: Reason!): Uuid!
            updateProfileInfo(location: Location!, identity: IdentityInput!, email: Email!, payoutSettings: PayoutSettingsInput!): Uuid!
          }
          type Query {
            hello: String!
          }
          enum IdentityType {
            COMPANY
            PERSON
          }
          enum PayoutSettingsType {
            BANK_ADDRESS
            ETHEREUM_ADDRESS
            ETHEREUM_NAME
          }
          input BankAddress {
            BIC: String!
            IBAN: String!
          }
          input CompanyIdentity {
            id: String!
            name: String!
          }
          input IdentityInput {
            optCompany: CompanyIdentity
            optPerson: PersonIdentity
            type: IdentityType!
          }
          input Location {
            city: String!
            country: String!
            postCode: String!
            address: String!
          }
          input PayoutSettingsInput {
            optBankAddress: BankAddress
            optEthAddress: EthereumAddress
            optEthName: EthereumName
            type: PayoutSettingsType!
          }
          input PersonIdentity {
            firstname: String!
            lastname: String!
          }
          input Reason {
            workItems: [String!]
          }
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          type Query {
            hello: String!
          }
- name: GithubProxy
  definition:
    url_from_env: GITHUB_PROXY_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: GITHUB_PROXY_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar DateTimeUtc
          type File {
            content: String!
            encoding: Encoding!
          }
          type PullRequest {
            assigneeId: Int
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            id: Int!
            status: Status!
            title: String!
          }
          type Query {
            fetchRepositoryDetails(id: Int!): Repository!
            fetchUserDetailsById(userId: Int!): User!
            helloFromGithubProxy: String!
          }
          type Repository {
            contributors: [User!]!
            logoUrl: String!
            readme: File
          }
          type User {
            avatarUrl: String!
            id: Int!
            login: String!
          }
          enum Encoding {
            BASE64
          }
          enum Status {
            CLOSED
            OPEN
          }
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar DateTimeUtc
          type File {
            content: String!
            encoding: Encoding!
          }
          type PullRequest {
            assigneeId: Int
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            id: Int!
            status: Status!
            title: String!
          }
          type Query {
            fetchRepositoryDetails(id: Int!): Repository!
            fetchRepositoryPRs(id: Int!): [PullRequest!]!
            fetchUserDetails(username: String!): User!
            fetchUserDetailsById(userId: Int!): User!
          }
          type Repository {
            contributors: [User!]!
            logoUrl: String!
            readme: File
          }
          type User {
            avatarUrl: String!
            id: Int!
            login: String!
          }
          enum Encoding {
            BASE64
          }
          enum Status {
            CLOSED
            OPEN
          }
