- name: Backend
  definition:
    url_from_env: BACKEND_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: BACKEND_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
            mutation: Mutation
          }
          scalar Amount
          scalar DateTimeUtc
          scalar EthereumAddress
          scalar EthereumName
          scalar GithubIssueId
          scalar GithubIssueNumber
          scalar GithubRepoId
          scalar GithubUserId
          scalar Iban
          scalar Url
          scalar Uuid
          type Issue {
            author: User!
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            htmlUrl: Url!
            id: GithubIssueId!
            mergedAt: DateTimeUtc
            number: GithubIssueNumber!
            repoId: GithubRepoId!
            status: Status!
            title: String!
            type: Type!
            updatedAt: DateTimeUtc!
          }
          type Mutation {
            acceptProjectLeaderInvitation(invitationId: Uuid!): Boolean!
            acceptTermsAndConditions: Uuid!
            applyToProject(projectId: Uuid!): Uuid!
            cancelPaymentRequest(projectId: Uuid!, paymentId: Uuid!): Payment!
            createIssue(projectId: Uuid!, githubRepoId: Int!, title: String!, description: String!): Issue!
            ignoreIssue(projectId: Uuid!, repoId: GithubRepoId!, issueNumber: GithubIssueNumber!): Boolean!
            markInvoiceAsReceived(paymentReferences: [PaymentReference!]!): Int!
            requestPayment(projectId: Uuid!, recipientId: Int!, amountInUsd: Int!, hoursWorked: Int!, reason: Reason!): Payment!
            unignoreIssue(projectId: Uuid!, repoId: GithubRepoId!, issueNumber: GithubIssueNumber!): Boolean!
            updatePayoutInfo(location: Location, identity: IdentityInput, payoutSettings: PayoutSettingsInput): Uuid!
            updateUserAvatar: Boolean!
            updateUserProfile(bio: String, location: String, website: String, languages: [Language!], weeklyAllocatedTime: AllocatedTime!, lookingForAJob: Boolean!, contactInformations: [Information!]!, cover: ProfileCover): Boolean!
          }
          type Payment {
            amount: Amount!
            budgetId: Uuid!
            commandId: Uuid!
            paymentId: Uuid!
            projectId: Uuid!
          }
          type Query {
            releaseDate: String!
          }
          type User {
            avatarUrl: Url!
            htmlUrl: Url!
            id: GithubUserId!
            login: String!
          }
          enum AllocatedTime {
            LESS_THAN_ONE_DAY
            MORE_THAN_THREE_DAYS
            NONE
            ONE_TO_THREE_DAYS
          }
          enum Channel {
            DISCORD
            EMAIL
            LINKED_IN
            TELEGRAM
            TWITTER
          }
          enum IdentityType {
            COMPANY
            PERSON
          }
          enum PayoutSettingsType {
            BANK_ADDRESS
            ETHEREUM_ADDRESS
            ETHEREUM_NAME
          }
          enum ProfileCover {
            BLUE
            CYAN
            MAGENTA
            YELLOW
          }
          enum Status {
            CANCELLED
            CLOSED
            COMPLETED
            MERGED
            OPEN
          }
          enum Type {
            ISSUE
            PULL_REQUEST
          }
          input BankAddress {
            BIC: String!
            IBAN: Iban!
          }
          input CompanyIdentity {
            identificationNumber: String
            name: String
            owner: PersonIdentity
          }
          input IdentityInput {
            optCompany: CompanyIdentity
            optPerson: PersonIdentity
            type: IdentityType!
          }
          input Information {
            channel: Channel!
            contact: String!
            public: Boolean!
          }
          input Language {
            name: String!
            weight: Int!
          }
          input Location {
            address: String
            city: String
            country: String
            postCode: String
          }
          input PaymentReference {
            paymentId: Uuid!
            projectId: Uuid!
          }
          input PayoutSettingsInput {
            optBankAddress: BankAddress
            optEthAddress: EthereumAddress
            optEthName: EthereumName
            type: PayoutSettingsType!
          }
          input PersonIdentity {
            firstname: String
            lastname: String
          }
          input Reason {
            workItems: [WorkItem!]!
          }
          input WorkItem {
            issueNumber: GithubIssueNumber!
            repoId: GithubRepoId!
          }
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          type Query {
            releaseDate: String!
          }
  remote_relationships:
    - relationships:
        - definition:
            to_source:
              field_mapping:
                number: issue_number
                repoId: repo_id
              relationship_type: array
              source: default
              table:
                name: ignored_github_issues
                schema: public
          name: ignoredForProjects
      type_name: Issue
- name: DustyBot
  definition:
    url_from_env: DUSTY_BOT_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: Api-Key
        value_from_env: DUSTY_BOT_GRAPHQL_API_KEY
- name: GithubProxy
  definition:
    url_from_env: GITHUB_PROXY_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: GITHUB_PROXY_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar DateTimeUtc
          scalar GithubIssueId
          scalar GithubIssueNumber
          scalar GithubRepoId
          scalar GithubUserId
          scalar Url
          type Issue {
            author: User!
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            htmlUrl: Url!
            id: GithubIssueId!
            mergedAt: DateTimeUtc
            number: GithubIssueNumber!
            repoId: GithubRepoId!
            status: Status!
            title: String!
            type: Type!
            updatedAt: DateTimeUtc!
          }
          type Query {
            fetchIssue(repoOwner: String!, repoName: String!, issueNumber: Int!): Issue
            fetchIssueByRepositoryId(repositoryId: Int!, issueNumber: Int!): Issue
            fetchUserDetailsById(userId: Int!): User
            searchUsers(query: String!, sort: String, order: String, perPage: Int, page: Int): [User!]
          }
          type User {
            avatarUrl: Url!
            htmlUrl: Url!
            id: GithubUserId!
            login: String!
          }
          enum Status {
            CANCELLED
            CLOSED
            COMPLETED
            MERGED
            OPEN
          }
          enum Type {
            ISSUE
            PULL_REQUEST
          }
  remote_relationships:
    - relationships:
        - definition:
            to_source:
              field_mapping:
                id: recipient_id
              relationship_type: array
              source: default
              table:
                name: payment_requests
                schema: public
          name: paymentRequests
        - definition:
            to_source:
              field_mapping:
                id: github_user_id
              relationship_type: object
              source: default
              table:
                name: registered_users
                schema: public
          name: user
      type_name: User
    - relationships:
        - definition:
            to_source:
              field_mapping:
                number: issue_number
                repoId: repo_id
              relationship_type: array
              source: default
              table:
                name: ignored_github_issues
                schema: public
          name: ignoredForProjects
      type_name: Issue
