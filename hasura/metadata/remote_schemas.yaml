- name: Backend
  definition:
    url_from_env: BACKEND_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: BACKEND_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
            mutation: Mutation
          }
          scalar Email
          scalar EthereumAddress
          scalar EthereumName
          scalar Uuid
          type Mutation {
            acceptProjectLeaderInvitation(invitationId: Uuid!): Boolean!
            requestPayment(projectId: Uuid!, recipientId: Int!, amountInUsd: Int!, reason: Reason!): Uuid!
            updateProfileInfo(location: Location, identity: IdentityInput, payoutSettings: PayoutSettingsInput, contactInformation: ContactInformation): Uuid!
          }
          type Query {
            hello: String!
          }
          enum IdentityType {
            COMPANY
            PERSON
          }
          enum PayoutSettingsType {
            BANK_ADDRESS
            ETHEREUM_ADDRESS
            ETHEREUM_NAME
          }
          input BankAddress {
            BIC: String!
            IBAN: String!
          }
          input CompanyIdentity {
            identificationNumber: String
            name: String
            owner: PersonIdentity
          }
          input ContactInformation {
            discord: String
            email: Email
            telegram: String
            twitter: String
          }
          input IdentityInput {
            optCompany: CompanyIdentity
            optPerson: PersonIdentity
            type: IdentityType!
          }
          input Location {
            address: String
            city: String
            country: String
            postCode: String
          }
          input PayoutSettingsInput {
            optBankAddress: BankAddress
            optEthAddress: EthereumAddress
            optEthName: EthereumName
            type: PayoutSettingsType!
          }
          input PersonIdentity {
            firstname: String
            lastname: String
          }
          input Reason {
            workItems: [String!]
          }
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          type Query {
            hello: String!
          }
- name: GithubProxy
  definition:
    url_from_env: GITHUB_PROXY_GRAPHQL_URL
    timeout_seconds: 60
    customization: {}
    headers:
      - name: api-key
        value_from_env: GITHUB_PROXY_GRAPHQL_API_KEY
  comment: ""
  permissions:
    - role: registered_user
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar DateTimeUtc
          scalar Url
          type Issue {
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            id: Int!
            mergedAt: DateTimeUtc
            number: Int!
            htmlUrl: Url!
            repositoryUrl: Url!
            status: Status!
            title: String!
          }
          type Query {
            fetchPullRequest(repoOwner: String!, repoName: String!, prNumber: Int!): Issue
            fetchRepositoryDetails(id: Int!): Repository
            fetchRepositoryPRs(id: Int!): [Issue!]
            fetchUserDetails(username: String!): User
            fetchUserDetailsById(userId: Int!): User
            searchIssues(query: String!, sort: String, order: String, perPage: Int, page: Int): [Issue!]
          }
          type Repository {
            contributors: [User!]!
            description: String!
            forksCount: Int!
            id: Int!
            logoUrl: Url!
            htmlUrl: Url!
            stars: Int!
          }
          type User {
            avatarUrl: Url!
            id: Int!
            login: String!
            htmlUrl: Url!
          }
          enum Status {
            CLOSED
            MERGED
            OPEN
          }
    - role: public
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar DateTimeUtc
          scalar Url
          type Issue {
            closedAt: DateTimeUtc
            createdAt: DateTimeUtc!
            id: Int!
            mergedAt: DateTimeUtc
            number: Int!
            status: Status!
            title: String!
            htmlUrl: Url!
            repositoryUrl: Url!
          }
          type Query {
            fetchRepositoryDetails(id: Int!): Repository
            fetchUserDetailsById(userId: Int!): User
            helloFromGithubProxy: String!
          }
          type Repository {
            contributors: [User!]!
            description: String!
            forksCount: Int!
            id: Int!
            logoUrl: Url!
            htmlUrl: Url!
            stars: Int!
          }
          type User {
            avatarUrl: Url!
            id: Int!
            login: String!
            htmlUrl: Url!
          }
          enum Status {
            CLOSED
            MERGED
            OPEN
          }
  remote_relationships:
    - relationships:
        - definition:
            to_source:
              field_mapping:
                id: recipient_id
              relationship_type: array
              source: default
              table:
                name: payment_requests
                schema: public
          name: paymentRequests
        - definition:
            to_source:
              field_mapping:
                id: github_user_id
              relationship_type: object
              source: default
              table:
                name: github_users
                schema: auth
          name: user
      type_name: User
