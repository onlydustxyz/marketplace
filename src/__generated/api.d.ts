/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/github/installations/{id}": {
    /**
     * Get Github organization and repositories linked to installation Id
     * @description Get Github Organization and  Repositories for installation Id
     */
    get: operations["getGithubInstallation"];
  };
  "/api/v1/github/users": {
    /**
     * Search Github user
     * @description Search Github user by login
     */
    get: operations["searchGithubUser"];
  };
  "/api/v1/me": {
    /**
     * Get caller info
     * @description Get the caller info
     */
    get: operations["getMe"];
    /**
     * Patch some caller info
     * @description Patch onboarding info of the caller
     */
    patch: operations["patchMe"];
  };
  "/api/v1/me/applications": {
    /**
     * Apply to become a project contributor
     * @description Apply to become a project contributor
     */
    post: operations["applyOnProject"];
  };
  "/api/v1/me/contributions": {
    /**
     * Get caller's contributions
     * @description Get contributions of the caller.
     */
    get: operations["getMyContributions"];
  };
  "/api/v1/me/payout-info": {
    /**
     * Caller payout info
     * @description Get payout info of the caller
     */
    get: operations["getMyPayoutInfo"];
    /**
     * Update caller payout info
     * @description Set payout info of the caller
     */
    put: operations["setMyPayoutInfo"];
  };
  "/api/v1/me/profile": {
    /**
     * Get caller profile
     * @description Get the whole user profile
     */
    get: operations["getMyProfile"];
    /**
     * Update caller profile
     * @description Set the whole user profile (including private data)
     */
    put: operations["setMyProfile"];
  };
  "/api/v1/me/project-leader-invitations/{projectId}": {
    /**
     * Accept invitation to lead a project
     * @description Accept invitation to lead a project
     */
    put: operations["acceptInvitationToLeadProject"];
  };
  "/api/v1/me/rewards": {
    /**
     * Get caller's rewards
     * @description Get the page of all rewards where the recipient is the caller
     */
    get: operations["getMyRewards"];
  };
  "/api/v1/me/rewards/amounts": {
    /**
     * Get caller's rewarded total amounts
     * @description Get caller's rewarded total amounts
     */
    get: operations["getMyRewardTotalAmounts"];
  };
  "/api/v1/projects": {
    /**
     * Get all projects
     * @description Get the (soon to be paginated) list of all projects on the platform that are visible to the caller.
     */
    get: operations["getProjects"];
    /**
     * Create project
     * @description Create new project. The caller must be a leader of the project.
     */
    post: operations["createProject"];
  };
  "/api/v1/projects/logos": {
    /** Upload a project logo */
    post: operations["uploadProjectLogo"];
  };
  "/api/v1/projects/slug/{slug}": {
    /**
     * Get project details
     * @description Get the project if it is visible to the caller.
     */
    get: operations["getProjectBySlug"];
  };
  "/api/v1/projects/{projectId}": {
    /**
     * Get project details
     * @description Get the project if it is visible to the caller.
     */
    get: operations["getProject"];
  };
  "/api/v1/projects/{projectId}/budgets": {
    /**
     * Get project budgets
     * @description Get the list of all budgets from this project. Only project leaders can access this information.
     */
    get: operations["getProjectBudgets"];
  };
  "/api/v1/projects/{projectId}/contributions": {
    /**
     * Get contributions of a user within the project
     * @description Get contributions of a user on a given project. The caller must be a leader of the project.
     */
    get: operations["getProjectContributions"];
  };
  "/api/v1/projects/{projectId}/contributors": {
    /**
     * Get all project contributors
     * @description Get the (soon to be paginated) list of all contributors of the project.
     */
    get: operations["getProjectContributors"];
  };
  "/api/v1/projects/{projectId}/rewards": {
    /**
     * Get project rewards
     * @description Get the list of all rewards granted from this project. Only project leaders can access this information.
     */
    get: operations["getProjectRewards"];
    /**
     * Create reward
     * @description Create new reward. The caller must be a leader of the project.
     */
    post: operations["createReward"];
  };
  "/api/v1/projects/{projectId}/search/contributors": {
    /**
     * Search project contributors by login
     * @description Get the list of all contributors of the project matching the input query. If not enough results are found, the search is extended to the 5 best matching github users.
     */
    get: operations["searchProjectContributors"];
  };
  "/api/v1/rewards/{rewardId}": {
    /**
     * Get reward details
     * @description Get all reward data. The caller must either be the recipient of the reward, or a leader of the reward's project.
     */
    get: operations["getReward"];
    /**
     * Update reward
     * @description Update reward content. The caller must be a leader of the reward's project and the reward must not have been processed yet.
     */
    put: operations["updateReward"];
    /**
     * Cancel reward
     * @description Cancel the reward. The caller must be a leader of the reward's project and the reward must not have been processed yet.
     */
    delete: operations["cancelReward"];
  };
  "/api/v1/technologies": {
    /**
     * Technologies referenced by OnlyDust
     * @description Get the list of all technologies (languages, frameworks, tools, etc.) referenced by OnlyDust
     */
    get: operations["getTechnologies"];
  };
  "/api/v1/users/{userId}": {
    /**
     * Get user profile
     * @description Get the publicly available user profile (ie. all data except private data)
     */
    get: operations["getUserProfile"];
  };
  "/api/v1/version": {
    /** Get API version information */
    get: operations["getAPIVersion"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** ApplicationRequest */
    ApplicationRequest: {
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      projectId: string;
    };
    /** BudgetResponse */
    BudgetResponse: {
      /** @enum {string} */
      currency: "APT" | "ETH" | "OP" | "STARK" | "USD";
      /** Format: bigdecimal */
      initialAmount: number;
      /** Format: bigdecimal */
      initialDollarsEquivalent?: number;
      /** Format: bigdecimal */
      remaining: number;
      /** Format: bigdecimal */
      remainingDollarsEquivalent?: number;
    };
    /** CompanyIdentity */
    CompanyIdentity: {
      /**
       * @description SIRET or equivalent
       * @example 1873-4987-41234
       */
      identificationNumber?: string;
      /** @example OnlyDust */
      name?: string;
      owner?: components["schemas"]["PersonIdentity"];
    };
    /** ContactInformation */
    ContactInformation: {
      /** @enum {string} */
      channel: "DISCORD" | "EMAIL" | "LINKEDIN" | "TELEGRAM" | "TWITTER" | "WHATSAPP";
      /** @example foobar@gmail.com */
      contact: string;
      /** @enum {string} */
      visibility: "private" | "public";
    };
    /** ContributionPageItemResponse */
    ContributionPageItemResponse: {
      /**
       * Format: date-time
       * @description When the contribution was completed
       */
      completedAt?: string;
      contributor: components["schemas"]["UserLinkResponse"];
      /**
       * Format: date-time
       * @description When the contribution was created
       */
      createdAt: string;
      githubCodeReview?: components["schemas"]["GithubCodeReview"];
      githubIssue?: components["schemas"]["GithubIssue"];
      githubPullRequest?: components["schemas"]["GithubPullRequest"];
      /** @description The contribution ID is determined from its content's ID (ie PR / issue / code review ID) */
      id: string;
      project: components["schemas"]["ShortProjectResponse"];
      /** @description Rewards granted for this contribution */
      rewardIds: string[];
      /** @enum {string} */
      status: "CANCELLED" | "COMPLETED" | "IN_PROGRESS";
      /** @enum {string} */
      type: "CODE_REVIEW" | "ISSUE" | "PULL_REQUEST";
    };
    /** ContributionPageResponse */
    ContributionPageResponse: {
      contributions: components["schemas"]["ContributionPageItemResponse"][];
      /** @example true */
      hasMore: boolean;
      /**
       * Format: int32
       * @description if there is no next page, it will be equals to the last page
       */
      nextPageIndex: number;
      projects: components["schemas"]["ShortProjectResponseWithRepos"][];
      /** Format: int32 */
      totalItemNumber: number;
      /** Format: int32 */
      totalPageNumber: number;
    };
    /** ContributorPageItemResponse */
    ContributorPageItemResponse: {
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * Format: int32
       * @example 3
       */
      codeReviewToReward?: number;
      /**
       * Format: int32
       * @description Total number of contributions the contributor made on this project.
       * @example 22
       */
      contributionCount: number;
      /**
       * Format: int32
       * @description Total number of contributions the contributor was not rewarded for on this project.
       * @example 9
       */
      contributionToRewardCount?: number;
      /**
       * Format: bigdecimal
       * @description Total money amount the contributor earned on this project.
       * @example 3500
       */
      earned: number;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /**
       * Format: int32
       * @example 4
       */
      issueToReward?: number;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
      /**
       * Format: int32
       * @example 2
       */
      pullRequestToReward?: number;
      /**
       * Format: int32
       * @description Total number of rewards the contributor got on this project.
       * @example 10
       */
      rewardCount: number;
    };
    /** ContributorSearchItemResponse */
    ContributorSearchItemResponse: {
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /**
       * @description True if the user is registered on OnlyDust
       * @example false
       */
      isRegistered: boolean;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
    };
    /** ContributorSearchResponse */
    ContributorSearchResponse: {
      externalContributors: components["schemas"]["ContributorSearchItemResponse"][];
      internalContributors: components["schemas"]["ContributorSearchItemResponse"][];
    };
    /** ContributorsPageResponse */
    ContributorsPageResponse: {
      contributors: components["schemas"]["ContributorPageItemResponse"][];
      /** @example false */
      hasMore: boolean;
      /**
       * Format: int32
       * @description if there is no next page, it will be equals to the last page
       */
      nextPageIndex: number;
      /** Format: int32 */
      totalItemNumber: number;
      /** Format: int32 */
      totalPageNumber: number;
    };
    /** CreateProjectRequest */
    CreateProjectRequest: {
      githubRepoIds?: number[];
      inviteGithubUserIdsAsProjectLeads?: number[];
      /** @example false */
      isLookingForContributors?: boolean;
      /** @description Direct URL to project's logo image */
      logoUrl?: string;
      longDescription?: string;
      moreInfo?: components["schemas"]["MoreInfo"][];
      name?: string;
      shortDescription?: string;
    };
    /** CreateProjectResponse */
    CreateProjectResponse: {
      /** Format: uuid */
      projectId?: string;
    };
    /** GetMeResponse */
    GetMeResponse: {
      avatarUrl: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /**
       * @description True if the user has accepted the latest version of terms and conditions
       * @example false
       */
      hasAcceptedLatestTermsAndConditions: boolean;
      /**
       * @description True if the user has seen the onboarding process
       * @example false
       */
      hasSeenOnboardingWizard: boolean;
      id: string;
      login: string;
    };
    /** GithubCodeReview */
    GithubCodeReview: {
      author: components["schemas"]["UserLinkResponse"];
      /**
       * @description Code review ID
       * @example 2189e8dc91876fa1686e81b09de33ca7bdca08e80854d4cada02c8288cf03739
       */
      id: string;
      pullRequest: components["schemas"]["GithubPullRequest"];
      /**
       * Format: date-time
       * @description When the code review was requested.
       */
      requestedAt: string;
      /** @enum {string} */
      state: "APPROVED" | "CHANGES_REQUESTED" | "COMMENTED" | "DISMISSED" | "PENDING";
      /**
       * Format: date-time
       * @description When the code review was submitted.
       */
      submittedAt?: string;
    };
    /**
     * GithubIssue
     * @description Github issue
     */
    GithubIssue: {
      author: components["schemas"]["UserLinkResponse"];
      /** @description The body of the issue. */
      body?: string;
      /**
       * Format: date-time
       * @description When the issue was cancelled or closed.
       */
      closedAt?: string;
      /** @description The list of pull requests resolving this issue. */
      closingPullRequests?: components["schemas"]["GithubPullRequest"][];
      /** Format: int32 */
      commentCount: number;
      /**
       * Format: date-time
       * @description When the issue was created.
       */
      createdAt: string;
      /** @description The public Github URL of the issue. */
      htmlUrl: string;
      /**
       * @description Github issue ID (databaseId)
       * @example 1678794252
       */
      id: string;
      /**
       * Format: int64
       * @description Issue number
       * @example 6
       */
      number: number;
      repository: components["schemas"]["GithubRepoResponse"];
      /** @enum {string} */
      status: "CANCELLED" | "COMPLETED" | "OPEN";
      /** @description Issue or pull request title on Github */
      title: string;
    };
    /** GithubPullRequest */
    GithubPullRequest: {
      author: components["schemas"]["UserLinkResponse"];
      /** @description The body of the pull request. */
      body?: string;
      /**
       * Format: date-time
       * @description When the issue was cancelled or closed.
       */
      closedAt?: string;
      /** @description The list of issues resolved by this pull request. */
      closingIssues: components["schemas"]["GithubIssue"][];
      /** Format: int32 */
      commentCount: number;
      /**
       * Format: date-time
       * @description When the issue was created.
       */
      createdAt: string;
      /** @description The public Github URL of the issue. */
      htmlUrl: string;
      /**
       * @description Github pull request ID (databaseId)
       * @example 27218542
       */
      id: string;
      /**
       * Format: date-time
       * @description When the pull request was merged.
       */
      mergedAt?: string;
      /**
       * Format: int64
       * @description Issue number
       * @example 6
       */
      number: number;
      repository: components["schemas"]["GithubRepoResponse"];
      /** @enum {string} */
      status: "CLOSED" | "MERGED" | "OPEN";
      /** @description Issue or pull request title on Github */
      title: string;
    };
    /** GithubRepoResponse */
    GithubRepoResponse: {
      /**
       * @description Repo description on Github
       * @example Awesome repo
       */
      description?: string;
      /**
       * Format: int32
       * @description Fork count on Github
       * @example 3
       */
      forkCount: number;
      /**
       * @description Are issues enabled on Github for this repo
       * @example false
       */
      hasIssues: boolean;
      /**
       * @description The public Github URL of the repo
       * @example https://github.com/onlydustxyz/marketplace-backend
       */
      htmlUrl: string;
      /**
       * Format: int64
       * @description Github repo ID (databaseId)
       * @example 650626566
       */
      id: number;
      /**
       * @description Repo name on Github
       * @example marketplace-backend
       */
      name: string;
      /**
       * @description Repo owner on Github
       * @example onlydustxyz
       */
      owner: string;
      /**
       * Format: int32
       * @description Number of stars on Github
       * @example 625
       */
      stars: number;
    };
    /** GithubUserResponse */
    GithubUserResponse: {
      avatarUrl?: string;
      /** Format: int64 */
      id?: number;
      /** @example false */
      isRegistered?: boolean;
      login?: string;
    };
    /** InlineResponse200 */
    InlineResponse200: {
      /** Format: date-time */
      releaseDate?: string;
    };
    /** InstallationResponse */
    InstallationResponse: {
      organization?: components["schemas"]["InstalledGithubOrganizationResponse"];
      /** @example [{"name":"marketplace-backend","shortDescription":"The backend of the OnlyDust marketplace","githubId":650626566},{"name":"marketplace-frontend","shortDescription":"The frontend of the OnlyDust marketplace","githubId":650626568}] */
      repos?: components["schemas"]["InstalledGithubRepoResponse"][];
    };
    /** InstalledGithubOrganizationResponse */
    InstalledGithubOrganizationResponse: {
      logoUrl?: string;
      name?: string;
    };
    /** InstalledGithubRepoResponse */
    InstalledGithubRepoResponse: {
      /** Format: int64 */
      githubId?: number;
      name?: string;
      shortDescription?: string;
    };
    /** MoreInfo */
    MoreInfo: {
      url?: string;
      value?: string;
    };
    /** MyRewardAmountResponse */
    MyRewardAmountResponse: {
      /** @enum {string} */
      currency: "APT" | "ETH" | "OP" | "STARK" | "USD";
      /** Format: bigdecimal */
      totalAmount: number;
      /** Format: bigdecimal */
      totalDollarsEquivalent?: number;
    };
    /** MyRewardPageItemResponse */
    MyRewardPageItemResponse: {
      amount: components["schemas"]["RewardAmountResponse"];
      /**
       * Format: uuid
       * @description OnlyDust reward ID
       */
      id: string;
      /**
       * Format: int32
       * @example 11
       */
      numberOfRewardedContributions: number;
      /** Format: date-time */
      requestedAt: string;
      /** @example https://onlydust.xyz/cdn-cgi/image/width=100/https://onlydust-app-images.s3.eu-west-1.amazonaws.com/5003677688814069549.png */
      rewardedOnProjectLogoUrl: string;
      /** @example Bretzel */
      rewardedOnProjectName: string;
      /** @enum {string} */
      status: "COMPLETE" | "PENDING_INVOICE" | "PENDING_SIGNUP" | "PROCESSING";
    };
    /** MyRewardTotalAmountsResponse */
    MyRewardTotalAmountsResponse: {
      details?: components["schemas"]["MyRewardAmountResponse"][];
      /** Format: bigdecimal */
      totalAmount?: number;
    };
    /** MyRewardsPageResponse */
    MyRewardsPageResponse: {
      /** @example true */
      hasMore: boolean;
      /**
       * Format: int32
       * @description if there is no next page, it will be equals to the last page
       */
      nextPageIndex: number;
      rewards: components["schemas"]["MyRewardPageItemResponse"][];
      /** Format: int32 */
      totalItemNumber: number;
      /** Format: int32 */
      totalPageNumber: number;
    };
    /**
     * OnlyDustError
     * @description Error contract strongly inspired by JSON problem (rfc7807) specification
     */
    OnlyDustError: {
      /**
       * Format: uuid
       * @description The error id
       * @example 4f7c660e-6cf1-4424-b240-e630c4c19069
       */
      id: string;
      /**
       * @description A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
       * @example Not enough credit.
       */
      message: string;
      /**
       * Format: int32
       * @description The HTTP status code generated by the origin server for this occurrence of the problem.
       * @example 400
       */
      status: number;
    };
    /** PatchMeContract */
    PatchMeContract: {
      /**
       * @description True if the user has accepted the latest version of terms and conditions
       * @example false
       */
      hasAcceptedTermsAndConditions?: boolean;
      /**
       * @description True if the the onboarding process was displayed to the user
       * @example false
       */
      hasSeenOnboardingWizard?: boolean;
    };
    /** PersonIdentity */
    PersonIdentity: {
      /** @example John */
      firstname?: string;
      /** @example Smith */
      lastname?: string;
    };
    /** PrivateUserProfileResponse */
    PrivateUserProfileResponse: ({
      /** @enum {string} */
      allocatedTimeToContribute?: "GREATER_THAN_THREE_DAYS" | "LESS_THAN_ONE_DAY" | "NONE" | "ONE_TO_THREE_DAYS";
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl?: string;
      /**
       * @description User bio as in Github profile
       * @example Contributing to awesome open source projects.
       */
      bio?: string;
      contacts?: components["schemas"]["ContactInformation"][];
      /** @enum {string} */
      cover?: "BLUE" | "CYAN" | "MAGENTA" | "YELLOW";
      /**
       * Format: date-time
       * @description When the user signed up on OnlyDust
       */
      createdAt?: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId?: number;
      /** Format: uri */
      htmlUrl?: string;
      /**
       * Format: uuid
       * @description OnlyDust user ID
       */
      id?: string;
      /**
       * @description Whether the user is looking for a job or not
       * @example false
       */
      isLookingForAJob?: boolean;
      /**
       * Format: date-time
       * @description The last time the user signed in on OnlyDust
       */
      lastSeenAt?: string;
      /**
       * @description User location as in Github profile
       * @example Paris, France
       */
      location?: string;
      /**
       * @description User's Github login
       * @example ofux
       */
      login?: string;
      projects?: components["schemas"]["UserProfileProjects"][];
      stats?: components["schemas"]["UserProfileStats"];
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies?: {
        [key: string]: number;
      };
      /** @description User website as in Github profile */
      website?: string;
    }) & components["schemas"]["PublicUserProfileResponse"] & ({
      /** @enum {string} */
      allocatedTimeToContribute?: "GREATER_THAN_THREE_DAYS" | "LESS_THAN_ONE_DAY" | "NONE" | "ONE_TO_THREE_DAYS";
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * @description User bio as in Github profile
       * @example Contributing to awesome open source projects.
       */
      bio?: string;
      contacts?: components["schemas"]["ContactInformation"][];
      /** @enum {string} */
      cover?: "BLUE" | "CYAN" | "MAGENTA" | "YELLOW";
      /**
       * Format: date-time
       * @description When the user signed up on OnlyDust
       */
      createdAt?: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /** Format: uri */
      htmlUrl: string;
      /**
       * Format: uuid
       * @description OnlyDust user ID
       */
      id?: string;
      /**
       * @description Whether the user is looking for a job or not
       * @example false
       */
      isLookingForAJob?: boolean;
      /**
       * Format: date-time
       * @description The last time the user signed in on OnlyDust
       */
      lastSeenAt?: string;
      /**
       * @description User location as in Github profile
       * @example Paris, France
       */
      location?: string;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
      projects?: components["schemas"]["UserProfileProjects"][];
      stats?: components["schemas"]["UserProfileStats"];
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies?: {
        [key: string]: number;
      };
      /** @description User website as in Github profile */
      website?: string;
    });
    /** ProjectBudgetsResponse */
    ProjectBudgetsResponse: {
      budgets: components["schemas"]["BudgetResponse"][];
      /** Format: bigdecimal */
      initialDollarsEquivalent?: number;
      /** Format: bigdecimal */
      remainingDollarsEquivalent?: number;
    };
    /** ProjectListItemResponse */
    ProjectListItemResponse: {
      /**
       * Format: int32
       * @description Total number of contributors within the project
       * @example 163
       */
      contributorCount: number;
      /**
       * @description Is the project currently hiring?
       * @example false
       */
      hiring: boolean;
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      id: string;
      /** @example false */
      isInvitedAsProjectLead: boolean;
      leaders: components["schemas"]["RegisteredUserLinkResponse"][];
      /**
       * @description Direct URL to project's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
       */
      logoUrl: string;
      /** @example Verkle Tries */
      name: string;
      /**
       * Format: int32
       * @description Number of github repositories included in the project
       * @example 2
       */
      repoCount: number;
      /** @example A short project description */
      shortDescription: string;
      /**
       * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
       * @example my-awesome-project
       */
      slug: string;
      sponsors: components["schemas"]["SponsorResponse"][];
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies: {
        [key: string]: number;
      };
      /** @enum {string} */
      visibility: "PRIVATE" | "PUBLIC";
    };
    /** ProjectListResponse */
    ProjectListResponse: {
      projects: components["schemas"]["ProjectListItemResponse"][];
      sponsors?: string[];
      technologies?: string[];
    };
    /** ProjectResponse */
    ProjectResponse: {
      /**
       * Format: int32
       * @description Total number of contributors within the project
       * @example 163
       */
      contributorCount: number;
      /**
       * @description Is the project currently hiring?
       * @example false
       */
      hiring: boolean;
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      id: string;
      leaders: components["schemas"]["RegisteredUserLinkResponse"][];
      /**
       * @description Direct URL to project's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
       */
      logoUrl: string;
      /** @example A lonnnnnnnnnnnnng project description */
      longDescription: string;
      /**
       * @description External link to get more information about the project
       * @example https://t.me/my-super-project
       */
      moreInfoUrl: string;
      /** @example Verkle Tries */
      name: string;
      /**
       * Format: bigdecimal
       * @example 20
       */
      remainingUsdBudget: number;
      repos?: components["schemas"]["GithubRepoResponse"][];
      /** @example A short project description */
      shortDescription: string;
      /**
       * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
       * @example my-awesome-project
       */
      slug: string;
      sponsors: components["schemas"]["SponsorResponse"][];
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies: {
        [key: string]: number;
      };
      /** @description The top 3 contributors (by contribution count) of this project */
      topContributors: components["schemas"]["UserLinkResponse"][];
      /** @enum {string} */
      visibility: "PRIVATE" | "PUBLIC";
    };
    /** PublicUserProfileResponse */
    PublicUserProfileResponse: {
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * @description User bio as in Github profile
       * @example Contributing to awesome open source projects.
       */
      bio?: string;
      contacts?: components["schemas"]["ContactInformation"][];
      /** @enum {string} */
      cover?: "BLUE" | "CYAN" | "MAGENTA" | "YELLOW";
      /**
       * Format: date-time
       * @description When the user signed up on OnlyDust
       */
      createdAt?: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /** Format: uri */
      htmlUrl: string;
      /**
       * Format: uuid
       * @description OnlyDust user ID
       */
      id?: string;
      /**
       * Format: date-time
       * @description The last time the user signed in on OnlyDust
       */
      lastSeenAt?: string;
      /**
       * @description User location as in Github profile
       * @example Paris, France
       */
      location?: string;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
      projects?: components["schemas"]["UserProfileProjects"][];
      stats?: components["schemas"]["UserProfileStats"];
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies?: {
        [key: string]: number;
      };
      /** @description User website as in Github profile */
      website?: string;
    };
    /** RegisteredUserLinkResponse */
    RegisteredUserLinkResponse: {
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /** Format: uri */
      htmlUrl: string;
      /**
       * Format: uuid
       * @description OnlyDust user ID
       */
      id: string;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
    };
    /** Resource */
    Resource: Record<string, never>;
    /** RewardAmountResponse */
    RewardAmountResponse: {
      /** @enum {string} */
      currency: "APT" | "ETH" | "OP" | "STARK" | "USD";
      /** Format: bigdecimal */
      dollarsEquivalent?: number;
      /** Format: bigdecimal */
      total: number;
    };
    /** RewardItemRequest */
    RewardItemRequest: {
      /** @enum {string} */
      type: "CODE_REVIEW" | "ISSUE" | "PULL_REQUEST";
    };
    /** RewardPageItemResponse */
    RewardPageItemResponse: {
      amount: components["schemas"]["RewardAmountResponse"];
      /**
       * Format: uuid
       * @description OnlyDust reward ID
       */
      id: string;
      /**
       * Format: int32
       * @example 11
       */
      numberOfRewardedContributions: number;
      /** Format: date-time */
      requestedAt: string;
      /** @example https://avatars.githubusercontent.com/u/16590657?v=4 */
      rewardedUserAvatar: string;
      /** @example PierreOucif */
      rewardedUserLogin: string;
      /** @enum {string} */
      status: "COMPLETE" | "PENDING_INVOICE" | "PENDING_SIGNUP" | "PROCESSING";
    };
    /** RewardRequest */
    RewardRequest: {
      /**
       * Format: bigdecimal
       * @description Currency amount
       */
      amount: number;
      /** @enum {string} */
      currency: "APT" | "ETH" | "OP" | "STARK" | "USD";
      items: components["schemas"]["RewardItemRequest"][];
    };
    /** RewardResponse */
    RewardResponse: {
      amount: components["schemas"]["RewardAmountResponse"];
      /** Format: date-time */
      requestedAt?: string;
      /** @enum {string} */
      status?: "CODE_REVIEW" | "ISSUE" | "PULL_REQUEST";
    };
    /** RewardsPageResponse */
    RewardsPageResponse: {
      /** @example true */
      hasMore: boolean;
      /**
       * Format: int32
       * @description if there is no next page, it will be equals to the last page
       */
      nextPageIndex: number;
      rewards: components["schemas"]["RewardPageItemResponse"][];
      /** Format: int32 */
      totalItemNumber: number;
      /** Format: int32 */
      totalPageNumber: number;
    };
    /** ShortProjectResponse */
    ShortProjectResponse: {
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      id: string;
      /**
       * @description Direct URL to project's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
       */
      logoUrl: string;
      /** @example Verkle Tries */
      name: string;
      /** @example A short project description */
      shortDescription: string;
      /**
       * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
       * @example my-awesome-project
       */
      slug: string;
      /** @enum {string} */
      visibility: "PRIVATE" | "PUBLIC";
    };
    /** ShortProjectResponseWithRepos */
    ShortProjectResponseWithRepos: {
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      id: string;
      /**
       * @description Direct URL to project's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
       */
      logoUrl: string;
      /** @example Verkle Tries */
      name: string;
      repos?: components["schemas"]["GithubRepoResponse"][];
      /** @example A short project description */
      shortDescription: string;
      /**
       * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
       * @example my-awesome-project
       */
      slug: string;
      /** @enum {string} */
      visibility: "PRIVATE" | "PUBLIC";
    };
    /** SponsorResponse */
    SponsorResponse: {
      /**
       * Format: uuid
       * @description OnlyDust sponsor ID
       */
      id: string;
      /**
       * @description Direct URL to sponsor's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png
       */
      logoUrl: string;
      /**
       * @description Sponsor name
       * @example Ethereum Foundation
       */
      name: string;
      /**
       * @description URL of sponsor's website
       * @example https://ethereum.org
       */
      url: string;
    };
    /** UploadImageResponse */
    UploadImageResponse: {
      /** @description The direct URL to the uploaded image */
      url?: string;
    };
    /** UserContributionStats */
    UserContributionStats: {
      /** Format: int32 */
      codeReviewCount?: number;
      /** Format: int32 */
      issueCount?: number;
      /** Format: int32 */
      pullRequestCount?: number;
      /**
       * Format: int32
       * @example 34
       */
      week?: number;
      /**
       * Format: int32
       * @example 2023
       */
      year?: number;
    };
    /** UserLinkResponse */
    UserLinkResponse: {
      /**
       * @description Direct URL to user's avatar image
       * @example https://avatars.githubusercontent.com/u/595505?v=4
       */
      avatarUrl: string;
      /**
       * Format: int64
       * @description Github user ID (databaseId)
       * @example 595505
       */
      githubUserId: number;
      /** Format: uri */
      htmlUrl: string;
      /**
       * @description User's Github login
       * @example ofux
       */
      login: string;
    };
    /** UserPayoutInformationContract */
    UserPayoutInformationContract: {
      company?: components["schemas"]["CompanyIdentity"];
      /** @example false */
      isCompany?: boolean;
      location?: components["schemas"]["UserPayoutInformationContractLocation"];
      payoutSettings?: components["schemas"]["UserPayoutInformationContractPayoutSettings"];
      person?: components["schemas"]["PersonIdentity"];
    };
    /** UserPayoutInformationContractLocation */
    UserPayoutInformationContractLocation: {
      /** @example 33 rue de Rivoli */
      address?: string;
      /** @example Paris */
      city?: string;
      /** @example France */
      country?: string;
      /** @example 75001 */
      postalCode?: string;
    };
    /** UserPayoutInformationContractPayoutSettings */
    UserPayoutInformationContractPayoutSettings: {
      /** @example 0xa645c3bdd0dfd0c3628803075b3b133e8426061dc915ef996cc5ed4cece6d4e5 */
      aptosAddress?: string;
      /** @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 */
      ethAddress?: string;
      /** @example vitalik.eth */
      ethName?: string;
      /** @example 0x72c30fcd1e7bd691ce206cd36bbd87c4c7099545 */
      optimismAddress?: string;
      sepaAccount?: components["schemas"]["UserPayoutInformationContractPayoutSettingsSepaAccount"];
      /** @example 0x056471aa79e3daebb62185cebee14fb0088b462b04ccf6e60ec9386044bec798 */
      starknetAddress?: string;
      /** @enum {string} */
      usdPreferredMethod?: "SEPA" | "USDC";
    };
    /** UserPayoutInformationContractPayoutSettingsSepaAccount */
    UserPayoutInformationContractPayoutSettingsSepaAccount: {
      /** @example DAAEFRPPCCT */
      bic?: string;
      /** @example FR5417569000301995586997O41 */
      iban?: string;
    };
    /** UserProfileProjects */
    UserProfileProjects: {
      /**
       * Format: int32
       * @description Total number of contributors within the project
       * @example 163
       */
      contributorCount?: number;
      /**
       * Format: uuid
       * @description OnlyDust project ID
       */
      id?: string;
      /** @example false */
      isLead?: boolean;
      /**
       * @description Direct URL to project's logo image
       * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
       */
      logoUrl?: string;
      /** @example Verkle Tries */
      name?: string;
      /**
       * Format: bigdecimal
       * @description Total USD-equivalent amount of all rewards granted on this project
       * @example 25400
       */
      totalGranted?: number;
      /**
       * Format: int32
       * @description Number of contributions made by the user on this project
       * @example 34
       */
      userContributionCount?: number;
      /**
       * Format: date-time
       * @description The last time the user contributed to this project
       */
      userLastContributedAt?: string;
    };
    /** UserProfileRequest */
    UserProfileRequest: {
      /** @enum {string} */
      allocatedTimeToContribute?: "GREATER_THAN_THREE_DAYS" | "LESS_THAN_ONE_DAY" | "NONE" | "ONE_TO_THREE_DAYS";
      /**
       * @description User bio as in Github profile
       * @example Contributing to awesome open source projects.
       */
      bio?: string;
      contacts?: components["schemas"]["ContactInformation"][];
      /** @enum {string} */
      cover?: "BLUE" | "CYAN" | "MAGENTA" | "YELLOW";
      /**
       * @description Whether the user is looking for a job or not
       * @example false
       */
      isLookingForAJob?: boolean;
      /**
       * @description User location as in Github profile
       * @example Paris, France
       */
      location?: string;
      /**
       * @description List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
       * @example {"Rust":91283,"Go":12388,"Java":1233}
       */
      technologies?: {
        [key: string]: number;
      };
      /** @description User website as in Github profile */
      website?: string;
    };
    /** UserProfileStats */
    UserProfileStats: {
      /**
       * Format: int32
       * @description Number of projects on which the user contributed
       * @example 2
       */
      contributedProjectCount?: number;
      /**
       * Format: int32
       * @description Total number of contributions made by the user within OnlyDust projects
       * @example 104
       */
      contributionCount?: number;
      contributionCountPerWeeks?: components["schemas"]["UserContributionStats"][];
      /**
       * Format: int32
       * @description Number of projects the user leads
       * @example 1
       */
      leadedProjectCount?: number;
      /**
       * Format: bigdecimal
       * @description Total USD-equivalent amount the user earned from rewards
       * @example 4000
       */
      totalEarned?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D": unknown;
}

export interface operations {

  /**
   * Get Github organization and repositories linked to installation Id
   * @description Get Github Organization and  Repositories for installation Id
   */
  getGithubInstallation: {
    parameters: {
      path: {
        /** @description id */
        id: number;
      };
    };
    responses: {
      /** @description Github installation info */
      200: {
        content: {
          "application/json": components["schemas"]["InstallationResponse"];
          "application/problem+json": components["schemas"]["InstallationResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Search Github user
   * @description Search Github user by login
   */
  searchGithubUser: {
    parameters: {
      query: {
        /** @description search */
        search: string;
      };
    };
    responses: {
      /** @description Github user list */
      200: {
        content: {
          "application/json": components["schemas"]["GithubUserResponse"][];
          "application/problem+json": components["schemas"]["GithubUserResponse"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get caller info
   * @description Get the caller info
   */
  getMe: {
    responses: {
      /** @description Minimalist user info */
      200: {
        content: {
          "application/json": components["schemas"]["GetMeResponse"];
          "application/problem+json": components["schemas"]["GetMeResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Patch some caller info
   * @description Patch onboarding info of the caller
   */
  patchMe: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchMeContract"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description The user was patched successfully. */
      204: {
        content: {
          "application/problem+json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Apply to become a project contributor
   * @description Apply to become a project contributor
   */
  applyOnProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ApplicationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description The application was sent successfully. */
      204: {
        content: {
          "application/problem+json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get caller's contributions
   * @description Get contributions of the caller.
   */
  getMyContributions: {
    parameters: {
      query?: {
        /** @description Contribution type filter */
        types?: "CODE_REVIEW" | "ISSUE" | "PULL_REQUEST";
        /** @description Project filter */
        projects?: string;
        /** @description Repository filter */
        repositories?: number;
        /** @description Sorting field */
        sort?: "CREATED_AT" | "PROJECT_REPO_NAME" | "TITLE";
        /** @description Sort direction */
        direction?: "ASC" | "DESC";
        /** @description Page number */
        page?: number;
        /** @description Number of items returned by page */
        pageSize?: number;
      };
    };
    responses: {
      /** @description Contribution list */
      200: {
        content: {
          "application/json": components["schemas"]["ContributionPageResponse"];
          "application/problem+json": components["schemas"]["ContributionPageResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Caller payout info
   * @description Get payout info of the caller
   */
  getMyPayoutInfo: {
    responses: {
      /** @description Payout information */
      200: {
        content: {
          "application/json": components["schemas"]["UserPayoutInformationContract"];
          "application/problem+json": components["schemas"]["UserPayoutInformationContract"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Update caller payout info
   * @description Set payout info of the caller
   */
  setMyPayoutInfo: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserPayoutInformationContract"];
      };
    };
    responses: {
      /** @description Payout information */
      200: {
        content: {
          "application/json": components["schemas"]["UserPayoutInformationContract"];
          "application/problem+json": components["schemas"]["UserPayoutInformationContract"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get caller profile
   * @description Get the whole user profile
   */
  getMyProfile: {
    responses: {
      /** @description Profile */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserProfileResponse"];
          "application/problem+json": components["schemas"]["PrivateUserProfileResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Update caller profile
   * @description Set the whole user profile (including private data)
   */
  setMyProfile: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserProfileRequest"];
      };
    };
    responses: {
      /** @description User profile */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserProfileResponse"];
          "application/problem+json": components["schemas"]["PrivateUserProfileResponse"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Accept invitation to lead a project
   * @description Accept invitation to lead a project
   */
  acceptInvitationToLeadProject: {
    parameters: {
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description The invitation was accepted successfully. The caller is now a leader of the project. */
      204: {
        content: {
          "application/problem+json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get caller's rewards
   * @description Get the page of all rewards where the recipient is the caller
   */
  getMyRewards: {
    parameters: {
      query: {
        /** @description page_index */
        page_index: number;
        /** @description page_size */
        page_size: number;
        /** @description Sort order */
        sort?: "AMOUNT" | "CONTRIBUTION" | "REQUESTED_AT" | "STATUS";
        /** @description direction */
        direction?: "ASC" | "DESC";
      };
    };
    responses: {
      /** @description Page of rewards */
      200: {
        content: {
          "application/json": components["schemas"]["MyRewardsPageResponse"];
          "application/problem+json": components["schemas"]["MyRewardsPageResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get caller's rewarded total amounts
   * @description Get caller's rewarded total amounts
   */
  getMyRewardTotalAmounts: {
    responses: {
      /** @description My reward total amounts */
      200: {
        content: {
          "application/json": components["schemas"]["MyRewardTotalAmountsResponse"];
          "application/problem+json": components["schemas"]["MyRewardTotalAmountsResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get all projects
   * @description Get the (soon to be paginated) list of all projects on the platform that are visible to the caller.
   */
  getProjects: {
    parameters: {
      query?: {
        /** @description Sort order */
        sort?: "CONTRIBUTOR_COUNT" | "NAME" | "RANK" | "REPO_COUNT";
        /** @description Technology filter */
        technologies?: string;
        /** @description Sponsor filter */
        sponsor?: string;
        /** @description Filter mine projects */
        mine?: boolean;
        /** @description Full text search */
        search?: string;
      };
    };
    responses: {
      /** @description List of projects */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectListResponse"];
          "application/problem+json": components["schemas"]["ProjectListResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Create project
   * @description Create new project. The caller must be a leader of the project.
   */
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequest"];
      };
    };
    responses: {
      /** @description Create Project response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateProjectResponse"];
          "application/problem+json": components["schemas"]["CreateProjectResponse"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /** Upload a project logo */
  uploadProjectLogo: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Resource"];
        "image/png": components["schemas"]["Resource"];
      };
    };
    responses: {
      /** @description Image uploaded */
      200: {
        content: {
          "application/json": components["schemas"]["UploadImageResponse"];
          "application/problem+json": components["schemas"]["UploadImageResponse"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get project details
   * @description Get the project if it is visible to the caller.
   */
  getProjectBySlug: {
    parameters: {
      path: {
        /** @description slug */
        slug: string;
      };
    };
    responses: {
      /** @description The project */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
          "application/problem+json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get project details
   * @description Get the project if it is visible to the caller.
   */
  getProject: {
    parameters: {
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description The project */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
          "application/problem+json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get project budgets
   * @description Get the list of all budgets from this project. Only project leaders can access this information.
   */
  getProjectBudgets: {
    parameters: {
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description List of budgets */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectBudgetsResponse"];
          "application/problem+json": components["schemas"]["ProjectBudgetsResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get contributions of a user within the project
   * @description Get contributions of a user on a given project. The caller must be a leader of the project.
   */
  getProjectContributions: {
    parameters: {
      query: {
        /** @description githubUserId */
        githubUserId: number;
      };
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description Contribution list */
      200: {
        content: {
          "application/json": components["schemas"]["ContributionPageResponse"];
          "application/problem+json": components["schemas"]["ContributionPageResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get all project contributors
   * @description Get the (soon to be paginated) list of all contributors of the project.
   */
  getProjectContributors: {
    parameters: {
      query: {
        /** @description page_index */
        page_index: number;
        /** @description page_size */
        page_size: number;
        /** @description Sort order */
        sort?: "CONTRIBUTION_COUNT" | "EARNED" | "LOGIN" | "REWARD_COUNT" | "TO_REWARD_COUNT";
        /** @description direction */
        direction?: "ASC" | "DESC";
      };
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description List of project contributors */
      200: {
        content: {
          "application/json": components["schemas"]["ContributorsPageResponse"];
          "application/problem+json": components["schemas"]["ContributorsPageResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get project rewards
   * @description Get the list of all rewards granted from this project. Only project leaders can access this information.
   */
  getProjectRewards: {
    parameters: {
      query: {
        /** @description page_index */
        page_index: number;
        /** @description page_size */
        page_size: number;
        /** @description Sort order */
        sort?: "AMOUNT" | "CONTRIBUTION" | "REQUESTED_AT" | "STATUS";
        /** @description direction */
        direction?: "ASC" | "DESC";
      };
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description List of rewards */
      200: {
        content: {
          "application/json": components["schemas"]["RewardsPageResponse"];
          "application/problem+json": components["schemas"]["RewardsPageResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Create reward
   * @description Create new reward. The caller must be a leader of the project.
   */
  createReward: {
    parameters: {
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RewardRequest"];
      };
    };
    responses: {
      /** @description Reward */
      200: {
        content: {
          "application/json": components["schemas"]["RewardResponse"];
          "application/problem+json": components["schemas"]["RewardResponse"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Search project contributors by login
   * @description Get the list of all contributors of the project matching the input query. If not enough results are found, the search is extended to the 5 best matching github users.
   */
  searchProjectContributors: {
    parameters: {
      query?: {
        /** @description login query */
        login?: string;
      };
      path: {
        /** @description projectId */
        projectId: string;
      };
    };
    responses: {
      /** @description List of project contributors */
      200: {
        content: {
          "application/json": components["schemas"]["ContributorSearchResponse"];
          "application/problem+json": components["schemas"]["ContributorSearchResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden. The project is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Requested resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get reward details
   * @description Get all reward data. The caller must either be the recipient of the reward, or a leader of the reward's project.
   */
  getReward: {
    parameters: {
      path: {
        /** @description rewardId */
        rewardId: string;
      };
    };
    responses: {
      /** @description Reward */
      200: {
        content: {
          "application/json": components["schemas"]["RewardResponse"];
          "application/problem+json": components["schemas"]["RewardResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The reward is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Reward not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Update reward
   * @description Update reward content. The caller must be a leader of the reward's project and the reward must not have been processed yet.
   */
  updateReward: {
    parameters: {
      path: {
        /** @description rewardId */
        rewardId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RewardRequest"];
      };
    };
    responses: {
      /** @description Reward */
      200: {
        content: {
          "application/json": components["schemas"]["RewardResponse"];
          "application/problem+json": components["schemas"]["RewardResponse"];
        };
      };
      /** @description Created */
      201: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The reward is not visible to the caller. */
      403: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Reward not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Cancel reward
   * @description Cancel the reward. The caller must be a leader of the reward's project and the reward must not have been processed yet.
   */
  cancelReward: {
    parameters: {
      path: {
        /** @description rewardId */
        rewardId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description The reward was cancelled successfully. */
      204: {
        content: {
          "application/problem+json": external["Error-ModelName%7Bnamespace='java.lang',%20name='Void'%7D"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Forbidden. The reward is not visible to the caller. */
      403: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Reward not found */
      404: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Technologies referenced by OnlyDust
   * @description Get the list of all technologies (languages, frameworks, tools, etc.) referenced by OnlyDust
   */
  getTechnologies: {
    responses: {
      /** @description Technologies */
      200: {
        content: {
          "application/json": {
            [key: string]: Record<string, never>;
          };
          "application/problem+json": {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /**
   * Get user profile
   * @description Get the publicly available user profile (ie. all data except private data)
   */
  getUserProfile: {
    parameters: {
      path: {
        /** @description userId */
        userId: string;
      };
    };
    responses: {
      /** @description User profile */
      200: {
        content: {
          "application/json": components["schemas"]["PublicUserProfileResponse"];
          "application/problem+json": components["schemas"]["PublicUserProfileResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
  /** Get API version information */
  getAPIVersion: {
    responses: {
      /** @description API Version */
      200: {
        content: {
          "application/json": components["schemas"]["InlineResponse200"];
          "application/problem+json": components["schemas"]["InlineResponse200"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["OnlyDustError"];
          "application/problem+json": components["schemas"]["OnlyDustError"];
        };
      };
    };
  };
}
