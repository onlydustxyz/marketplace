version: "3.8"
services:
  db:
    container_name: db
    image: postgres:14.3-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: marketplace_db
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
      - ./scripts/initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  httpmock:
    container_name: httpmock
    image: alexliesenfeld/httpmock:latest
    ports:
      - 5001:5000
    volumes:
      - ./docker/httpmocks:/mocks
    environment:
      HTTPMOCK_MOCK_FILES_DIR: /mocks

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11-management
    ports:
      - 5672:5672
      - 15672:15672

  graphql-engine:
    container_name: graphql-engine
    image: hasura/graphql-engine:v2.15.2
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: always
    environment:
      DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      BACKEND_GRAPHQL_URL: ${BACKEND_GRAPHQL_URL:-http://host.docker.internal:8000/graphql}
      BACKEND_GRAPHQL_API_KEY: ${BACKEND_GRAPHQL_API_KEY:-myapikey}
      GITHUB_PROXY_GRAPHQL_API_KEY: ${GITHUB_PROXY_GRAPHQL_API_KEY:-mygithubproxyapikey}
      GITHUB_PROXY_GRAPHQL_URL: ${GITHUB_PROXY_GRAPHQL_URL:-http://host.docker.internal:8001/graphql}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # use Hasura CLI to access the console, see projet README
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-myadminsecretkey}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: naming_convention
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: graphql-default
    extra_hosts:
      - "host.docker.internal:host-gateway"

  hasura-auth:
    container_name: hasura-auth
    image: onlydustxyz/hasura-auth:latest
    depends_on:
      db:
        condition: service_healthy
      graphql-engine:
        condition: service_started
    environment:
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL:-postgres://postgres:postgres@db/marketplace_db}
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql-engine:8080/v1/graphql
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-myadminsecretkey}
      AUTH_JWT_CUSTOM_CLAIMS: '{"projectsLeaded":"projectsLeaded[].projectId","budgetsOwned":"budgetsOwned[].budgetId"}'
      AUTH_USER_DEFAULT_ALLOWED_ROLES: public,me,registered_user
      AUTH_USER_DEFAULT_ROLE: registered_user
      AUTH_LOG_LEVEL: info
      AUTH_CLIENT_URL: http://localhost:5173/login
      AUTH_PROVIDER_GITHUB_ENABLED: "true"
      AUTH_PROVIDER_GITHUB_SCOPE: user
      AUTH_SERVER_URL: http://localhost:4000
      AUTH_PROVIDER_GITHUB_CLIENT_ID: ${AUTH_PROVIDER_GITHUB_CLIENT_ID:-my_github_client_id}
      AUTH_PROVIDER_GITHUB_CLIENT_SECRET: ${AUTH_PROVIDER_GITHUB_CLIENT_SECRET:-my_github_client_secret}
    ports:
      - "4000:4000"

volumes:
  httpmocks:
  db:
    driver: local
