mutation createProject(
  $projectName: String!
  $telegramLink: Url!
  $logoUrl: Url!
  $shortDescription: String!
  $longDescription: String!
  $initialBudget: Int
  $hiring: Boolean
  $rank: Int
) {
  createProject(
    name: $projectName
    telegramLink: $telegramLink
    logoUrl: $logoUrl
    shortDescription: $shortDescription
    longDescription: $longDescription
    initialBudget: $initialBudget
    hiring: $hiring
    rank: $rank
  )
}

mutation updateProject(
  $projectId: Uuid!
  $name: String
  $telegramLink: Url
  $logoUrl: Url
  $shortDescription: String
  $longDescription: String
  $hiring: Boolean
  $rank: Int
) {
  updateProject(
    id: $projectId
    name: $name
    telegramLink: $telegramLink
    logoUrl: $logoUrl
    shortDescription: $shortDescription
    longDescription: $longDescription
    hiring: $hiring
    rank: $rank
  )
}

query getProjectBudget($projectId: uuid!) {
  projectsByPk(id: $projectId) {
    budgets {
      id
    }
  }
}

mutation updateBudgetAllocation($projectId: Uuid!, $amount: Int!) {
  updateBudgetAllocation(projectId: $projectId, newRemainingAmountInUsd: $amount)
}

mutation linkGithubRepo($projectId: Uuid!, $githubRepoId: Int!) {
  linkGithubRepo(projectId: $projectId, githubRepoId: $githubRepoId)
}

mutation unlinkGithubRepo($projectId: Uuid!, $githubRepoId: Int!) {
  unlinkGithubRepo(projectId: $projectId, githubRepoId: $githubRepoId)
}

mutation unassignProjectLead($projectId: Uuid!, $userId: Uuid!) {
  unassignProjectLead(projectId: $projectId, userId: $userId)
}

mutation inviteProjectLeader($projectId: Uuid!, $githubUserId: Int!) {
  inviteProjectLeader(projectId: $projectId, githubUserId: $githubUserId)
}

mutation acceptProjectLeaderInvitation($invitationId: Uuid!) {
  acceptProjectLeaderInvitation(invitationId: $invitationId)
}
