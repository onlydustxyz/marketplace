version: "3.8"
services:
  db:
    container_name: marketplace-db
    image: postgres:14.3-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: marketplace_db
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "5060:80"

  starknet-devnet:
    container_name: starknet-devnet
    image: shardlabs/starknet-devnet:0.3.1${ARM_TAG:-}
    command: --seed 0 --load-path /tmp/dump.pkl
    ports:
      - 5050:5050
    volumes:
      - .:/tmp
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5050/is_alive || exit 1
      interval: 5s
      retries: 10
      start_period: 5s
      timeout: 1s

  apibara:
    container_name: apibara
    image: apibara/starknet:ffbe469b2dadee8f5e3c11d35ee8b0f81915c63a
    command: /usr/local/bin/apibara-starknet start --custom-network name=devnet,url=http://starknet-devnet:5050 --poll-interval 500
    environment:
      RUST_LOG: info
    restart: always
    ports:
      - 7171:7171
    depends_on:
      starknet-devnet:
        condition: service_healthy
      db:
        condition: service_healthy

  httpmock:
    container_name: httpmock
    image: alexliesenfeld/httpmock:latest
    ports:
      - 5001:5000
    volumes:
      - ./httpmocks:/mocks
    environment:
      HTTPMOCK_MOCK_FILES_DIR: /mocks

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11-management
    ports:
      - 5672:5672
      - 15672:15672

  pg_hasura_metadata:
    image: postgres:12
    restart: always
    volumes:
      - db_hasura_metadata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    image: hasura/graphql-engine:v2.15.0
    ports:
      - "8080:8080"
    depends_on:
      - "pg_hasura_metadata"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@pg_hasura_metadata:5432/postgres
      PG_DATABASE_URL: postgres://postgres:postgres@localhost/marketplace_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

volumes:
  db_hasura_metadata:
  httpmocks:
  db:
    driver: local
