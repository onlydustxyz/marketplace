version: "3.8"
services:
  db:
    labels:
      type: infrastructure
    extends:
      file: docker-compose.yml
      service: db

  rabbitmq:
    labels:
      type: infrastructure
    extends:
      file: docker-compose.yml
      service: rabbitmq

  hasura:
    labels:
      type: infrastructure
    extends:
      file: docker-compose.yml
      service: hasura
    environment:
      BACKEND_GRAPHQL_URL: ${BACKEND_GRAPHQL_URL:-http://api:8000/graphql}

  hasura-console:
    labels:
      type: infrastructure
    container_name: hasura-console
    image: node:18-bullseye
    volumes:
      - .:/app
    command: bash -c "cd /app/hasura && yarn && yarn start"
    ports:
      - 9695:9695
    healthcheck:
      test: curl -f http://localhost:9695 || exit 1
      interval: 2s
      timeout: 1s
      retries: 30
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080

  hasura-auth:
    labels:
      type: infrastructure
    extends:
      file: docker-compose.yml
      service: hasura-auth

  api:
    labels:
      type: backend
    container_name: api
    image: rust:1.66
    depends_on:
      db:
        condition: service_healthy
      hasura-auth:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo
    command: bash -c "cd /app && cargo run -p api"
    ports:
      - 8000:8000
    healthcheck:
      test: curl -f http://localhost:8000 || exit 1
      interval: 2s
      timeout: 1s
      retries: 30
    environment:
      DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      AMQP_URL: amqp://rabbitmq:5672/%2f
      GRAPHQL_BASE_URL: http://hasura:8080/v1/graphql

  event-store:
    labels:
      type: backend
    container_name: event-store
    image: rust:1.66
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo
    command: bash -c "cd /app && cargo run -p event-store"
    environment:
      DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      AMQP_URL: amqp://rabbitmq:5672/%2f

  event-listeners:
    labels:
      type: backend
    container_name: event-listeners
    image: rust:1.66
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo
    command: bash -c "cd /app && cargo run -p event-listeners"
    environment:
      DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      AMQP_URL: amqp://rabbitmq:5672/%2f

  github-indexer:
    labels:
      type: backend
    container_name: github-indexer
    image: rust:1.66
    depends_on:
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo
    command: bash -c "cd /app && cargo run -p event-listeners --bin github-indexer"
    environment:
      DATABASE_URL: postgres://postgres:postgres@db/marketplace_db
      AMQP_URL: amqp://rabbitmq:5672/%2f

  frontend:
    labels:
      type: frontend
    container_name: frontend
    image: node:18-bullseye
    volumes:
      - .:/app
    command: bash -c "cd /app && yarn && yarn dev --host"
    ports:
      - 5173:5173
    healthcheck:
      test: curl -f http://localhost:5173 || exit 1
      interval: 2s
      timeout: 1s
      retries: 30

  storybook:
    labels:
      type: frontend
    container_name: storybook
    image: node:18-bullseye
    volumes:
      - .:/app
    command: bash -c "cd /app && yarn && yarn storybook"
    ports:
      - 6006:6006
    healthcheck:
      test: curl -f http://localhost:6006 || exit 1
      interval: 2s
      timeout: 1s
      retries: 30

volumes:
  cargo-cache:
  rabbitmq:
  db:
    driver: local
